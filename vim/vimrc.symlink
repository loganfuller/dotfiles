" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Vundle Plugins
" --------------

filetype off " required by vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim' " let Vundle manage Vundle, required
Plugin 'kien/ctrlp.vim' " fuzzy file searching
Plugin 'christoomey/vim-tmux-navigator' " seamlessly navigate vim / tmux splits
Plugin 'ntpeters/vim-better-whitespace' " highlight trailing whitespace
Plugin 'bling/vim-airline' " nicer status line
Plugin 'airblade/vim-gitgutter' " display git info in the gutter
Plugin 'mxw/vim-jsx' " jsx syntax highlighting
Plugin 'scrooloose/syntastic' " syntax checking
Plugin 'editorconfig/editorconfig-vim' " enforce stylistic guidelines
Plugin 'Valloric/YouCompleteMe' " automagical code completion
Plugin 'pangloss/vim-javascript' " Javascript code highlighting and indent

" all of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on


" Colours
" -------

set background=dark " solarized dark
colorscheme solarized " beautiful theme
syntax on " enable syntax processing


" Spaces & Tabs
" -------------

set shiftwidth=4 " number of visual spaces per TAB
set softtabstop=4 " number of spaces in TAB when editing
set expandtab " tabs are spaces

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on
set autoindent


" UI Config
" ---------

" Always display the status line, even if only one window is displayed
set laststatus=2

set number " show line numbers on the left
set showcmd " show command in bottom bar
filetype indent on " load filetype-specific indent files (from ~/.vim/indent)
set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to.
set ruler " show the cursor position all the time
set showmatch " highlight matching [{()}]
set mouse=a " enable mouse
set confirm " Instead of failing a command because of unsaved changes, ask if you wish to save changed files.
set autoread " Set to auto read when a file is changed from the outside.
set textwidth=80 colorcolumn=+1 " display marker at 80 char column
set cursorline " add horizontal line to highlight cursor location


" Searching
" ---------

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

set incsearch " search as characters are entered
set hlsearch " enable search highlighting

" return turns off search highlighting until the next search
nnoremap <silent> <CR> :noh<CR><CR>


" Folding
" -------

" Nothing for now - this is a placeholder


" Moving
" ------

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" much nicer window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" move to previous tab
nnoremap <C-Left> :tabprevious<CR>
" move to next tab
nnoremap <C-Right> :tabnext<CR>
" remove tab to the left
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
" remove tab to the right
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>


" Leader Shortcuts
" ----------------

let mapleader="," " remap leader

" more efficient escape bindings
inoremap jj <Esc>
inoremap jk <Esc>

" replace <C-l>
nnoremap <silent> <leader>l <C-l>


" CtrlP Settings
" --------------

" change the default mapping and the default command to invoke CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" when invoked, unless a starting directory is specified, CtrlP will set its local working directory according to this variable
let g:ctrlp_working_path_mode = 'ra'

" directories to ignore when searching
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" netrw Settings
" -----------------

let g:netrw_liststyle = 3 " nicer directory layout
let g:netrw_preview = 0 " open preview with p - preview shown in horizontal split (CTRL-W_z to close)
let g:netrw_use_errorwindow = 0 " netrw errors don't need to be closed
let g:netrw_browse_split = 2 " netrw windows opened in vertical split
let g:netrw_banner = 0 " suppress info banner
let g:netrw_fastbrowse = 0 " never reuse directory listings

" NOTE: code below was found at
" http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw/

" Toggle sidebar
fun! VexToggle(dir)
    if exists("t:vex_buf_nr")
        call VexClose()
    else
        call VexOpen(a:dir)
    endif
endf

" Open sidebar
fun! VexOpen(dir)
    let g:netrw_browse_split=4    " open files in previous window
    let vex_width = 35

    execute "Vexplore " . a:dir
    let t:vex_buf_nr = bufnr("%")
    wincmd H

    call VexSize(vex_width)
endf

" close sidebar
fun! VexClose()
    let cur_win_nr = winnr()
    let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

    1wincmd w
    close
    unlet t:vex_buf_nr

    execute (target_nr - 1) . "wincmd w"
    call NormalizeWidths()
endf

" set and lock sidebar width
fun! VexSize(vex_width)
    execute "vertical resize" . a:vex_width
    set winfixwidth
    call NormalizeWidths()
endf

" equalize widths of the remaining windows
fun! NormalizeWidths()
    let eadir_pref = &eadirection
    set eadirection=hor
    set equalalways! equalalways!
    let &eadirection = eadir_pref
endf

" equalize widths when a vertical split is opened with v
augroup NetrwGroup
    autocmd! BufEnter * call NormalizeWidths()
augroup END

" toggle sidebar in directory vim was opened in
noremap <Leader><Tab> :call VexToggle(getcwd())<CR>
" toggle sidebar in same directory as last file
noremap <Leader>` :call VexToggle("")<CR>


" airline Settings
" ----------------

" automatically display all buffers when there's only one tab open
let g:airline#extensions#tabline#enabled = 1

" load powerline fonts
let g:airline_powerline_fonts = 1

" theme, yo
let g:airline_theme = 'solarized'


" Backups
" -------

" Move backups to the tmp folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
